############
#  python  #
############
global !p
from useful_func import (tranf_clsname, write_init_body, write_function_docstring,
						 triple_quotes, get_args, write_docstring_args)
endglobal
snippet deff "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${5:${VISUAL:pass}}
endsnippet

snippet true "" wA
True
endsnippet
snippet false "" wA
False
endsnippet
snippet none "" wA
None
endsnippet
snippet slef "" wA
self
endsnippet
snippet mn "main function"
def ${1:`!p snip.rv = fn.split('.')[0]`}(${2:}):
	""" main function of `!p snip.rv = fn.split('.')[0]` """
	${0:${VISUAL}}


if __name__ == '__main__':
	$1($2)
endsnippet
snippet docs "document" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Programmer: `!v g:snips_author`
Email: `!v g:snips_email`
Github: `!v g:snips_github`
Date : `!v strftime("%Y-%m-%d")`
Description: ${2:useless program}
"""
${0:}
endsnippet
snippet studocs "student" b
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Student name: `!v g:snips_student_name`
Class: `!v g:snips_student_class`
Student number: `!v g:snips_student_number`
Date : `!v strftime("%Y-%m-%d")`
Description: a program about${0}
"""
endsnippet
snippet pr "print" b
print(${1:${VISUAL}})${0}
endsnippet
snippet input "input" b
${1:var} = input("${2:Please enter the $1} : ")${3:.split()}
endsnippet
snippet sf "self" b
self.${1:var} = ${2:self.$1}${0}
endsnippet
snippet xfor "x ** ?" w
x**${1:2} for x in range(${2:1, 10})${0}
endsnippet

snippet immplt "matlib plt" b
import matplotlib.pyplot as plt
endsnippet
snippet pltplot "make line" b
plt.plot(${1:x, y}, c='${2:red}', linewidth=${3:2})${0}
endsnippet
snippet pltsc "scatter(point)" b
plt.scatter(${1:x}, ${2:y}, c=${3:$2},
			${4:cmap=plt.cm.Blues, }edgecolor='${5:none}', s=${6:15})${0}
endsnippet
snippet pltsh "show plt" Ab
plt.show()
endsnippet
snippet plttt "title" b
plt.title("${1:Title}", fontsize=${2:24})${0}
endsnippet
snippet pltxl "x_label" b
plt.xlabel("${1:x_val}", fontsize=${2:14})${0}
endsnippet
snippet pltyl "y_label" b
plt.ylabel("${1:y_val}", fontsize=${2:14})${0}
endsnippet
snippet plttkp "setting of xy-axis" b
plt.tick_params(axis='${1:both}', which='${2:major}', labelsize=${3:14})${0}
endsnippet
snippet pltsave "save figure" b
plt.savefig('${1:pic_name}.png', bbox_inchs='tight')${0}
endsnippet
snippet plt_hide_x "hide_x_axis" b
plt.axes().get_xaxis().set_visible(False)
endsnippet
snippet plt_hide_y "hide_y_axis" b
plt.axes().get_yaxis().set_visible(False)
endsnippet
snippet pltfig "config figure" w
plt.figure(dpi=${1:128}, figsize=(10, 6))${0}
endsnippet

snippet openfile "with open..."
filename = "${1:file.txt}"
with open(filename, "${2:r+}") as f_obj:
	${3:contents = f_obj.read()}${0}
endsnippet
snippet get_json "get json" b
filename = "${1:file.json}"
with open(filename, "${2:w+}") as f_obj:
	json.dump(data, f_obj){0}
endsnippet
snippet opennext "Description" b
for i in range(${1:0}):
	f_obj.next()${0}
endsnippet
snippet cl "class with docstrings" b
class ${1:`!p snip.rv = tranf_clsname(t, snip)`}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined1.}`!p
#snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	#snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)`
		$0
endsnippet
snippet repr "string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:$1}

def __unicode__(self):
	${3:$1}
endsnippet
snippet poisson "poisson distribution" b
(math.exp(-${1:muse}) * $1 ** ${2:x_var}) / math.factorial($2)${0}
endsnippet
snippet nCr "combination" b
def nCr(n,r):
	f = math.factorial
	return f(n) / f(r) / f(n-r)
endsnippet
snippet pyg_hist "pygal histogram" b
${1:hist} = pygal.Bar()
$1.title = "${2:Title}"
$1.x_labels = ${3}
$1.x_title = "${4:Results}"
$1.y_title = "${5:Frequency}"

$1.add('$4', ${6})
$1.render_to_file('$2')${0}
endsnippet
snippet pyg_line "pygal lineChart" b
${1:line_chart} = pygal.Line(x_label_rotation=20, show_minor_x_labels=False)
$1.title = "${2:Title}"
$1.x_labels = ${3}
N = ${4:20}
$1.x_labels_major = $3[::N]
$1.add("$5", ${5})
$1.render_to_file('$2')${0}
endsnippet
snippet imppygstyle "pyg lightStyle" b
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS
endsnippet
snippet line_log "log chart" b
close_log = [math.log10(_) for _ in close]
endsnippet
snippet fore "for enumerate" b
for ${1:index}, ${2:item} in enumerate(${3:iterable}):
	${0:print($1, $2)}
endsnippet
snippet forkv "for key,value" b
for ${1:key}, ${2:value} in ${3:iterable}.items():
	${0:print($1, $2)}
endsnippet
snippet plt_scatter "scatter grap." b
${1:x} = [x for x in range (1, 10)]
${2:y} = [y**2 for y in x]
plt.scatter($1, $2, s=${3:15})
plt.title("${4:title}", fontsize=24)
plt.xlabel("${5:x_title}", fontsize=${7:14})
plt.ylabel("${6:y_title}", fontsize=$7)
plt.tick_params(axis='both', which='major', labelsize=$7)
plt.show()${0}
endsnippet
snippet plt_plot "plot grap." b
plt.figure(dpi=128, figsize=(10, 6))
plt.plot(${1:x, y,} c='red', linewidth=${2:2})
plt.title("${3:title}", fontsize=24)
plt.xlabel("${4:x_title}", fontsize=${6:14})
plt.ylabel("${5:y_title}", fontsize=$6)
plt.tick_params(axis='both', which='major', labelsize=$6)
plt.legend(loc='upper right')
plt.show()${0}
endsnippet
snippet figauf "fig autofx" b
fig.autofmt_xdate()
endsnippet
snippet pltfillbt "fill between" b
plt.fill_between(${1:x, y1, y2=0,} facecolor='blue', alpha=0.1)${0}
endsnippet
snippet impurl "Description" b
try:
	from urllib2 import urlopen
except ImportError:
	from urllib.request import urlopen
endsnippet
snippet draw_html "Description" b
with open('${1:FileName}.html', 'w', encoding='utf8') as html_file:
	msg = "<html> <head> <title>${2:html_title}</title> <meta"
	msg += " charset=\"utf-8\">\"</head><body>\n"
	html_file.write(msg)
	for svg in [
		${3:pyg_files}
	]:
		msg = '   <object type="image/svg+xml" data="{0}"'
		msg += '${4:height=500}></object>\n'
		html_file.write(msg.format(svg))
	html_file.write("</body> </html>")${0}
endsnippet
snippet req_json "store req json" b
URL = "${1:json_address}"
r = requests.get(URL)
print("Status code:", r.status_code)
with open('${2:`!p snip.rv = fn.split('.')[0]`}.json', 'w') as f:
	f.write(r.text)
file_requests = req.json()
endsnippet
snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${0:${VISUAL:pass}}
endsnippet

snippet argpAP "argu parser" b
parser = argparse.ArgumentParser(description="${1:Description of function.}",
								 formatter_class=argparse.ArgumentDefaultsHelpFormatter)${0}
endsnippet
snippet argpAA "add arguments" b
parser.add_argument("${1:}", metavar="$1", type=str,
					help="${2:the source URL of imgur}")${0}
endsnippet
