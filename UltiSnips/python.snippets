############
#  python  #
############

#! header
global !p
from useful_func import (tranf_clsname, write_init_body, write_function_docstring, triple_quotes, get_args, write_docstring_args)
endglobal
snippet deff "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${5:${VISUAL:pass}}
endsnippet

snippet true "" wA
True
endsnippet
snippet false "" wA
False
endsnippet
snippet none "" wA
None
endsnippet
snippet slef "" wA
self
endsnippet
snippet mn "main function"
def ${1:`!p snip.rv = fn.split('.')[0]`}(${2:}):
	""" main function of `!p snip.rv = fn.split('.')[0]` """
	${0:${VISUAL}}


if __name__ == '__main__':
	$1($2)
endsnippet
snippet docs "document" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Programmer: `!v g:snips_author`
Email: `!v g:snips_email`
Github: `!v g:snips_github`
Date : `!v strftime("%Y-%m-%d %H:%M:%S")`
Description: ${2:useless program}
"""
${0:}
endsnippet
snippet studocs "student" b
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Student name: `!v g:snips_student_name`
Class: `!v g:snips_student_class`
Student number: `!v g:snips_student_number`
Date : `!v strftime("%Y-%m-%d")`
Description: a program about${0}
"""
endsnippet
snippet pr "print" b
print(${1:${VISUAL}})${0}
endsnippet
snippet input "input" b
${1:var} = input("${2:Please enter the $1} : ")${0:.split()}
endsnippet
snippet sf "self" b
self.${1:var} = ${2:self.$1}${0}
endsnippet
snippet xfor "x ** ?" w
x**${1:2} for x in range(${2:1, 10})${0}
endsnippet

snippet imp_plt "matlib plt" b
import matplotlib.pyplot as plt
endsnippet
snippet pltplot "make line" b
plt.plot(${1:x, y}, c='${2:red}', linewidth=${3:2})${0}
endsnippet
snippet pltsc "scatter(point)" b
plt.scatter(${1:x}, ${2:y}, c=${3:$2},
			${4:cmap=plt.cm.Blues, }edgecolor='${5:none}', s=${6:15})${0}
endsnippet
snippet pltsh "show plt" Ab
plt.show()
endsnippet
snippet plttt "title" b
plt.title("${1:Title}", fontsize=${2:24})${0}
endsnippet
snippet pltxl "x_label" b
plt.xlabel("${1:x_val}", fontsize=${2:14})${0}
endsnippet
snippet pltyl "y_label" b
plt.ylabel("${1:y_val}", fontsize=${2:14})${0}
endsnippet
snippet plttkp "setting of xy-axis" b
plt.tick_params(axis='${1:both}', which='${2:major}', labelsize=${3:14})${0}
endsnippet
snippet pltsave "save figure" b
plt.savefig('${1:pic_name}.png', bbox_inchs='tight')${0}
endsnippet
snippet plt_hide_x "hide_x_axis" b
plt.axes().get_xaxis().set_visible(False)
endsnippet
snippet plt_hide_y "hide_y_axis" b
plt.axes().get_yaxis().set_visible(False)
endsnippet
snippet pltfig "config figure" w
plt.figure(dpi=${1:128}, figsize=(10, 6))${0}
endsnippet

snippet openfile "with open..."
filename = "${1:file.txt}"
with open(filename, "${2:r+}") as fp:
	${3:contents = fp.read()}${0}
endsnippet
snippet get_json "get json" b
filename = "${1:file.json}"
with open(filename, "${2:w+}") as fp:
	json.dump(data, fp){0}
endsnippet
snippet opennext "Description" b
for i in range(${1:0}):
	fp.next()${0}
endsnippet
snippet cl "class with docstrings" b
class ${1:`!p snip.rv = tranf_clsname(t, snip)`}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined1.}`!p
#snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	#snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)`
		$0
endsnippet

snippet _str "string representation"
def __str__(self):
	return ${0}
endsnippet
snippet poisson "poisson distribution" b
(math.exp(-${1:muse}) * $1 ** ${2:x_var}) / math.factorial($2)${0}
endsnippet
snippet nCr "combination" b
def nCr(n,r):
	f = math.factorial
	return f(n) / f(r) / f(n-r)
endsnippet
snippet pyg_hist "pygal histogram" b
${1:hist} = pygal.Bar()
$1.title = "${2:Title}"
$1.x_labels = ${3}
$1.x_title = "${4:Results}"
$1.y_title = "${5:Frequency}"

$1.add('$4', ${6})
$1.render_to_file('$2')${0}
endsnippet
snippet pyg_line "pygal lineChart" b
${1:line_chart} = pygal.Line(x_label_rotation=20, show_minor_x_labels=False)
$1.title = "${2:Title}"
$1.x_labels = ${3}
N = ${4:20}
$1.x_labels_major = $3[::N]
$1.add("$5", ${5})
$1.render_to_file('$2')${0}
endsnippet
snippet imppygstyle "pyg lightStyle" b
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS
endsnippet
snippet line_log "log chart" b
close_log = [math.log10(_) for _ in close]
endsnippet
snippet fore "for enumerate" b
for ${1:index}, ${2:item} in enumerate(${3:iterable}):
	${0:print($1, $2)}
endsnippet

snippet forkv "for key,value" b
for ${1:key}, ${2:value} in ${3:iterable}.iteritems():
	${0:print($1, $2)}
endsnippet

snippet plt_scatter "scatter grap." b
${1:x} = [x for x in range (1, 10)]
${2:y} = [y**2 for y in x]
plt.scatter($1, $2, s=${3:15})
plt.title("${4:title}", fontsize=24)
plt.xlabel("${5:x_title}", fontsize=${7:14})
plt.ylabel("${6:y_title}", fontsize=$7)
plt.tick_params(axis='both', which='major', labelsize=$7)
plt.show()${0}
endsnippet
snippet plt_plot "plot grap." b
plt.figure(dpi=128, figsize=(10, 6))
plt.plot(${1:x, y,} c='red', linewidth=${2:2})
plt.title("${3:title}", fontsize=24)
plt.xlabel("${4:x_title}", fontsize=${6:14})
plt.ylabel("${5:y_title}", fontsize=$6)
plt.tick_params(axis='both', which='major', labelsize=$6)
plt.legend(loc='upper right')
plt.show()${0}
endsnippet
snippet figauf "fig autofx" b
fig.autofmt_xdate()
endsnippet
snippet pltfillbt "fill between" b
plt.fill_between(${1:x, y1, y2=0,} facecolor='blue', alpha=0.1)${0}
endsnippet
snippet impUrlopen "Description" b
try:
	from urllib2 import urlopen
except ImportError:
	from urllib.request import urlopen
endsnippet

snippet imp_bs4 "Description" b
from bs4 import BeautifulSoup
endsnippet

snippet draw_html "Description" b
with open('${1:FileName}.html', 'w', encoding='utf8') as html_file:
	msg = "<html> <head> <title>${2:html_title}</title> <meta"
	msg += " charset=\"utf-8\">\"</head><body>\n"
	html_file.write(msg)
	for svg in [
		${3:pyg_files}
	]:
		msg = '   <object type="image/svg+xml" data="{0}"'
		msg += '${4:height=500}></object>\n'
		html_file.write(msg.format(svg))
	html_file.write("</body> </html>")${0}
endsnippet
snippet req_json "store req json" b
URL = "${1:json_address}"
r = requests.get(URL)
print("Status code:", r.status_code)
with open('${2:`!p snip.rv = fn.split('.')[0]`}.json', 'w') as f:
	f.write(r.text)
file_requests = req.json()
endsnippet
snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${0:${VISUAL:pass}}
endsnippet

snippet argpAP "argu parser" b
parser = argparse.ArgumentParser(description="${1:Description of function.}",
								 formatter_class=argparse.ArgumentDefaultsHelpFormatter)${0}
endsnippet
snippet argpAA "add arguments" b
parser.add_argument("${1:}", metavar="$1", type=str,
					help="${2:the source URL of imgur}")${0}
endsnippet
snippet imptk "tkinter" b
import tkinter as tk
endsnippet

snippet tkCanvas "Canvas" b
window = tk.Tk()
canvas = tk.Canvas(window, width=500, height=500)
canvas.pack()
endsnippet

snippet de8 "decode utf8" w
decode('utf8')
endsnippet

snippet cftime "curr time" b
time.strftime('%Y-%m-%d', time.localtime())
endsnippet

snippet cvgray "opencv gray" b
gy_$1 = cv2.cvtColor(${1:var}, cv2.COLOR_BGR2GRAY)${0}

endsnippet
snippet quitcv "quit opencv" b
# cv2.waitKey(0)
# cv2.destroyAllWindows()
if cv2.waitKey(20) & 0xff == ord('q'):
	break
endsnippet

snippet cvbright "cv brightness" b
filename = "${1:nekopara.jpg}"
image = cv2.imread(filename)
if image is None:
	print('Could not open or find the image: ', filename)
	exit(0)
new_image = image.copy()
contrast = 1.0     # 1 to 3
brightness = 0        # 0 to 100
for y in range(image.shape[0]):
	for x in range(image.shape[1]):
		for c in range(image.shape[2]):
			new_image[y, x, c] = np.clip(contrast * image[y, x, c] + brightness, 0, 255)

cv2.imshow('funny pic', new_image)
endsnippet
snippet cvread "read file" b
filename = os.getcwd() + "/" + os.argv[1]
image = cv2.imread(filename)
imgGrey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
if image is None:
	print('Could not open or find the image: ', filename)
	exit(0)
new_image = image.copy()
endsnippet
snippet impScrsel "scrapy" b
from scrapy.selector import Selector
endsnippet
snippet scr_xpath "Xpath" w
item['${1:item_name}'] = sub.xpath('/${2:tag}').extract()${0}
endsnippet
snippet scr_css "Css" w
subSelector.css('/${1:*}').extract()${0}
endsnippet
snippet numpy "import np" b
import numpy as np
endsnippet
snippet npar "np.array" w
np.array([
	${0}
])
endsnippet
snippet djg_admin "admin.py template" b
from ${1:learning_logs}.models import Topic, Entry

admin.site.register(Topic)
admin.site.register(Entry)${0}
endsnippet
snippet imp_colab "colab" b
from google.colab import files

with open('test.txt', 'w') as f:
	f.write('hello students!!!')

files.download('test.txt')
endsnippet
snippet impSel "chrome driver" b
# brew cask upgrade chromedriver
from selenium import webdriver
path = "/usr/local/bin/chromedriver"
path = "~\PycharmProjects\chromedriver.exe"
#browser = webdriver.Firefox()
driver = webdriver.Chrome(path)
${0}
endsnippet

snippet selConf "selenium example" b
driver.get('${1:http://www.cwb.gov.tw/V7/}')
driver.set_window_position(0,0) #瀏覽器位置
driver.set_window_size(700,700) #瀏覽器大小

driver.find_element_by_link_text('天氣').click() #點擊頁面上"天氣"的連結
endsnippet

snippet selClass "Description" w
find_elements_by_class_name("${2:}")
endsnippet

snippet djModel "django model" b
# import datetime
# from django.db import models
# from django.utils import timezone
class Food(models.Model):
	# id = models.AutoField(primary_key=True)
	food_name = models.CharField(max_length=30)
	price_name = models.DecimalField(max_digits=3, decimal_places=0)
	food_vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE) # 代表這食物是由哪一個攤販所做的
	make_date = models.DateTimeField('date made')
	description = models.CharField(max_length=255, blank=True)  # blank == ---, null == ""

	def __str__(self):
		return self.choice_text

	def was_published_recently(self):	# need datetime, and timezone(dj utils)
		now = timezone.now()
		return now - datetime.timedelta(days=1) <= self.make_date <= now
	was_published_recently.admin_order_field = 'make_date'
	was_published_recently.boolean = True
	was_published_recently.short_description = 'Published recently?'
endsnippet

snippet impdjContrib "" b
from django.contrib import admin, auth  # admin=>urls&admin, auth=>views
from django.contrib.auth.decorators import login_required
# @login_required
endsnippet

snippet impdjHttp "" b
from django.http import HttpResponseRedirect, HttpResponse, Http404
endsnippet

snippet impdjUrls "" b
from django.urls import include, path, reverse
endsnippet

snippet impdjShortcut "" b
from django.shortcuts import get_object_or_404, render  # all views
endsnippet

snippet impdjUtil "" b
from django.utils import timezone
endsnippet

snippet impdjTemp "" b
from django.template import loader
endsnippet

snippet impdjView "" b
from django.views import generic
endsnippet

snippet impdjPage "" b
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
endsnippet

snippet djAddapp "Description" b
'${1:polls}.apps.$1Config',${0}
endsnippet

snippet djAuth "auth" b
user = auth.authenticate(username=username, password=password)
if user is not None:
	auth.login(request, user)
	response = HttpResponseRedirect(reverse('sign:event'))
	request.session['user'] = username
	return response
endsnippet

snippet bsFind "find with bs4" b
bs = BeautifulSoup(${1:r.text}, 'lxml')${0}
endsnippet

snippet ttkAdd "" b
${1:var} = ttk.${2:type}(win)
$1.grid(row=0)
endsnippet

snippet ttkCombo "Description" b
def foo(event):#function called when '<<ComboboxSelected>>' event is triggered
	print v.get()#how to access to combobox selected item


root = Tk()
v = StringVar()#a string variable to hold user selection
options=["option 1", "option 2", "option 3"] #available combobox options
frame = Frame(root)
frame.pack()
combo = Combobox(root,textvariable=v, values=options)
combo.bind('<<ComboboxSelected>>',foo)#binding of user selection with a custom callback
combo.current(1)#set as default "option 2"
combo.pack()
root.mainloop()
endsnippet

snippet impskMLP "" b
from sklearn.neural_network.multilayer_perceptron import MLPClassifier
endsnippet

snippet bsgt "get_text" w
get_text(separator="\n")
endsnippet

snippet bsIfLink "" b
link_url = link.get('href')
if link_url is not None and link_url.startswith('http'):
	pass
endsnippet

snippet toJson "save as file"
jsonfile = {}
${1:data} = "$1.json"
with open($1, "w") as fp:
	json.dump(jsonfile, fp)
endsnippet

snippet importJC "json_class" b
import sys
sys.path.insert(0, "/Users/chunkityu/gitfiles/mess_room/python3/lib")
from json_class import JsonClass
endsnippet

snippet path_append "append library path" b
import sys
sys.path.append("`!v expand('%:p:h') `")${0}
endsnippet

snippet saveImg "save online image" b
import requests

def save_image(img_url):
	img_response = requests.get(img_url)
	abbr = img_url.split("/")
	filename = './img/{0}'.format(abbr[-1])
	with open(filename, "wb") as fp:
		fp.write(img_response.content)
endsnippet

snippet downloadFile "save file" b
with open(os.path.join("${1:a}", os.path.basename(url)), "wb") as f:
    for chunk in r.iter_content(chunk_size=512 * 1024):
		f.write(chunk)
endsnippet

snippet downloadImg "Description" b
import urllib.request
import os
res = urllib.request.urlopen(html)
# urllib.request.urlretrieve(imgUrl, os.path.basename(imgUrl))
endsnippet

snippet selSendKey "sendkeys" w
send_keys(Keys.chord(Keys.CONTROL, "a"), ${0})
endsnippet

snippet impprint "import pprint" b
from pprint import PrettyPrinter
endsnippet

snippet tz_hk "timezone hk" b
TIME_ZONE = 'Hongkong'${0}
endsnippet

snippet pr_end "print end" b
print("{:=^50}".format("END PROGRAM"))${0}
endsnippet
	
snippet imp_serial "import serializer" b
from rest_framework import serializers${0}
endsnippet

snippet views_template "django views" b
from django.urls import path
from . import views

app_name = "`!v expand('%:p:h:t')`"
urlpatterns = [
	path('', views.index, name='index'),
]${0}
endsnippet

snippet adm_reg "dj admin register" b
admin.site.register(${1:User})${0}
endsnippet


snippet cbv_context "get_context_data" b
def get_context_data(self, **kwargs):
	context = super().get_context_data(**kwargs)
	context['${1:data}'] = $1${0}
	return context
endsnippet


snippet asy_post "description" b
async def get_post(url):
	new_loop=asyncio.new_event_loop()
	asyncio.set_event_loop(new_loop)
	session = AsyncHTMLSession()
	browser = await pyppeteer.launch({ 
		'ignoreHTTPSErrors':True, 
		'headless':True, 
		'handleSIGINT':False, 
		'handleSIGTERM':False, 
		'handleSIGHUP':False
	})
	session._browser = browser
	resp_page = await session.get(url)
	await resp_page.html.arender()
	return resp_page
endsnippet

snippet font_s_l "font small light" w
('細明體', 20)
endsnippet

snippet th_lock "thread lock" b
lock.acquire()  # lock
${0:${VISUAL:pass}}
lock.release()  # endlock
endsnippet

snippet sp_popen "subprocess open" b
p = sp.Popen(f"${1:echo hello}"
				shell=True,
				stdout=sp.PIPE,
				stderr=sp.PIPE)${0}
endsnippet

snippet cv_key "cv2.waitKey" b
if k == ord("${1:q}") or k == ord("`!p snip.rv = t[1].upper()`"):
	${2:${VISUAL:print("Exit")
	cv2.destroyAllWindows()
	capture.release()
	break}}${0}
endsnippet

snippet cv_hough "Description" b
lines = cv2.HoughLinesP(image=roi,
						rho=3,
						theta=np.pi/180,
						threshold=30,
						minLineLength=50,
						maxLineGap=40)
endsnippet

snippet tk_inline_input "tk entry and btn" b
def func():
	pass
${1:}_path = tk.StringVar()
$1_entry = tk.Entry(input_fm, textvariable=$1_path, width=50)
$1_entry.place(rely=0.${3:5}, relx=0.5, anchor='center')
$1_btn = tk.Button(input_fm, text='$2', command=func,
				bg='#FFD700', fg='Black', font=('細明體', 10))
$1_btn.place(rely=0.$3, relx=0.85, anchor='center')
endsnippet

snippet "([^\s]\w+)\.len" "len(postfix)" r
len(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet ifl "if len" b
if len(${1:var}) > ${2:0}:
	${0:${VISUAL}}
endsnippet

snippet drvf "driver find" w
${1:driver}.find_element_by_${2:x}${2/(x)|(i)|(c)|(t)|(n).*/(?1:path)(?2:d)(?3:lass_name)(?4:ag_name)(?5:ame)/}('${3}')${0}
endsnippet

snippet impSelMan "driver manager" b
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
driver = webdriver.Chrome(ChromeDriverManager().install())
endsnippet

snippet impSelKey "selenium key" b
from selenium.webdriver.common.keys import Keys
endsnippet

snippet cv2wk "waitKey in cv2" b
cv2.waitKey()
cv2.destroyAllWindows()${0}
endsnippet

snippet sqlite_select "sqlite3 select" b
connect = sqlite3.connect('${1:database}.sqlite')
sql = 'select * from mytable'
cursor = connect.execute(sql)
datum = cursor.fetchall()
for data in datum:
	print(f"{data[0]}\t{data[1]}")
connect.close()
endsnippet

snippet dt_ftime "Description" w
datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")${0}
endsnippet

snippet impExcel "openpyxl lib" b
import openpyxl
from openpyxl.utils.cell import coordinate_from_string, column_index_from_string, \
	coordinate_from_string

wb = openpyxl.load_workbook('${1:example}.xlsx')
ws = wb.active
${0}
endsnippet

snippet fortwo "usually forget zip" b
for a, b in zip(${1:foo, bar}):
    print(a, b)
endsnippet

snippet for_excel "for openpyxl" b
for ${1:row} in ws[${2:'A1':'C3'}]:
    for cell in $1:
		${0:${VISUAL:cell.coordinate}}
endsnippet

snippet abspath "abs path" b
abs_path = os.path.dirname(os.path.abspath(__file__))
endsnippet

snippet logging_debug "log debug" b
logging.basicConfig(filename="${1:myLog.log}", level=logging.DEBUG,
					format='%(asctime)s - %(levelname)s - %(message)s')
endsnippet

# vim:ft=snippets:

