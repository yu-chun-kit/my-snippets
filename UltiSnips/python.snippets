############
#  python  #
############
global !p
from useful_func import tranf_clsname, write_init_body, triple_quotes, get_args
from useful_func import write_docstring_args
endglobal

snippet true "" wA
True
endsnippet
snippet false "" wA
False
endsnippet
snippet none "" wA
None
endsnippet
snippet mn "main function"
def ${1:`!p snip.rv = fn.split('.')[0]`}():
	""" main function of `!p snip.rv = fn.split('.')[0]` """
	${0:${VISUAL}}


if __name__ == '__main__':
	$1()
endsnippet
snippet docs "document" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Programmer: `!v g:snips_author`
Email: `!v g:snips_email`
Github: `!v g:snips_github`
Description: ${2:useless program}
"""
${0:}
endsnippet
snippet studocs "student" b
"""
Filename: ${1:`!v vim_snippets#Filename('$1.py', 'foo.py')`}
Student name: `!v g:snips_student_name`
Class: `!v g:snips_student_class`
Student number: `!v g:snips_student_number`
Description: a program about${0}
"""
endsnippet
snippet pr "print" b
print(${1:${VISUAL}})${0}
endsnippet
snippet input "input" b
${1:var} = input("${2:Please enter the $1} : ")${3:.split()}
endsnippet
snippet sf "self" b
self.${1:var} = ${2:self.$1}${0}
endsnippet
snippet xfor "x ** ?" w
x**${1:2} for x in range(${2:1, 10})${0}
endsnippet

snippet immplt "matlib plt" b
import matplotlib.pyplot as plt
endsnippet
snippet pltplot "plt plot" Ab
plt.plot(${1:${2:x_val}, ${3:y_val}}, linewidth=${4:5})${0}
endsnippet
snippet pltsc "scatter" Ab
plt.scatter(${1:x}, ${2:y}, c='${3:cornflowerblue}', edgecolor='${4:none}', s=${5:40})${0}
endsnippet
snippet pltsh "show plt" Ab
plt.show()
endsnippet
snippet plttt "title" Ab
plt.title("${1:Title}", fontsize=${2:24})${0}
endsnippet
snippet pltxl "x_label" Ab
plt.xlabel("${1:x_val}", fontsize=${2:14})${0}
endsnippet
snippet pltyl "y_label" Ab
plt.ylabel("${1:y_val}", fontsize=${2:14})${0}
endsnippet
snippet plttkp "tick_params" Ab
plt.tick_params(axis='${1:}', labelsize=${2:14})${0}
endsnippet
snippet openfile "with open..."
filename = "${1:file.txt}"
with open(filename, "w+") as f_obj:
	contents = f_obj.read()
endsnippet
snippet cl "class with docstrings" b
class ${1:`!p snip.rv = tranf_clsname(t, snip)`}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined1.}`!p
#snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)`
		$0
endsnippet
snippet repr "string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:$1}

def __unicode__(self):
	${3:$1}
endsnippet
snippet poisson "poisson distribution" b
(math.exp(${1:muse}) * $1 ** ${2:x_var}) / math.factorial($2)${0}
endsnippet
snippet nCr "combination" b
def nCr(n,r):
	f = math.factorial
	return f(n) / f(r) / f(n-r)
endsnippet
