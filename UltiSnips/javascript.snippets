snippet show_time "Description" b
var ${1:x} = document.getElementById('${2:}');
$1.className = "${3:}";
setTimeout(function() { $1.className = $1.className.replace("$3", ""); }, 3000);
endsnippet
snippet get "Get Elements" i
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet
snippet doc "Description" w
document
endsnippet
snippet win "Description" w
window
endsnippet
snippet qs "query s" w
querySelector('${1:CSS selector}')${0}
endsnippet
# Query selector all
snippet qsa "query sa" w
querySelectorAll('${1:CSS selector}')${0}
endsnippet
snippet suffix "Description" b
const suffix = this.dataset.sizing || "";
endsnippet
snippet => "array fun" i
(${1}) => { ${0:${VISUAL}} }
endsnippet
snippet c=> "const aryfun" w
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet
#####################
#  Array prototype  #
#####################
snippet pop "pop last and remove" w
${1:array}.pop(${2:0}, ${3:0});${0}
endsnippet
snippet fill "value(df:all), (start, (end))" w
${1:array}.fill(${2:num}, ${3:start});${0}
endsnippet
snippet reverse "reverse ary" w
reverse()${0}
endsnippet
snippet push "push to last" w
push(${1:element})${0}
endsnippet
snippet concat "merge ary" w
concat(${1:ary2})${0}
endsnippet
snippet indexof "elem index" w
indexof(${1:element});${0}
endsnippet
snippet tostring "ary tostring 1,2,3" w
toString();${0}
endsnippet
snippet filter "ary filter" w
filter(${1:function});${0}
endsnippet
snippet sort "ary sort" w
sort(${1:});${0}
endsnippet
snippet map "new ary with calling function on every elem" w
map(${1:function});${0}
endsnippet
snippet keys "ret obj of index of key eg012..." w
.keys(${1:function});${0}
endsnippet
snippet reduce "reducer function on each elem resulting 1 value" w
keys(${1:function}, ${2:start});${0}
endsnippet
snippet foreach "forEach" w
forEach((${2:item}) => {
	${0}
})
endsnippet
snippet some "a less one true will return true" w
some(${1:})i;
endsnippet
snippet ctb "console.table" b
console.table(${0:${VISUAL}});
endsnippet
snippet ael "addEventL..." w
addEventListener(${0})
endsnippet
snippet numcomma "comma with 3 num" b
function numberWithCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
endsnippet
snippet search_bar "search city example" b
f(word, city)
	return by filter
	for each place in city {
		declare RegExp(word, "gi")
		if space
			return ""
		else
			return either(||) string.match method with regex eg(place.city.match(regex))
	}
const match_city = findMatches(this.value, cities).slice(0, 5);
const innerhtml = match_city.map(place => {
	return `
		<li>
			<span class="name">${place.city}, ${place.state}</span>
			<span class="population">${numberWithCommas(place.population)}</span>
		</li>
	`;
}).join('');
suggestions.innerHTML = innerhtml;
endsnippet
snippet canvas_ctx "" b
const ctx canvas.getContext('2d');
ctx.strokeStyle = '#BADA55';
ctx.lineJoin = 'round';
ctx.lineCap = 'round';
endsnippet
snippet ctx_bgcolor "bgcolor of ctx" b
ctx.fillStyle = '${1:black}';
ctx.fillRect(0,0,canvas.width, canvas.height);${0}
endsnippet
