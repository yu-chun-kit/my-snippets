snippet show_time "Description" b
var ${1:x} = document.getElementById('${2:}');
$1.className = "${3:}";
setTimeout(function() { $1.className = $1.className.replace("$3", ""); }, 3000);
endsnippet
snippet get "Get Elements" i
${1:document}.getElement${2/(T)|(C)|.*/(?1:s)(?2:s)/}By${2:T}${2/(T)|(I)|(C)|.*/(?1:agName)(?2:d)(?3:lassName)/}('$3');${0}
endsnippet
snippet doc "Description" w
document
endsnippet
snippet win "Description" w
window
endsnippet
snippet qs "query s" w
document.querySelector('${1:CSS selector}')${0}
endsnippet
# Query selector all
snippet qsa "query sa" w
document.querySelectorAll('${1:CSS selector}')${0}
endsnippet
snippet suffix "Description" b
const suffix = this.dataset.sizing || "";
endsnippet
snippet => "array fun" i
(${1}) => { ${0:${VISUAL}} }
endsnippet
snippet c=> "const aryfun" w
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet
#####################
#  Array prototype  #
#####################
snippet pop "pop last and remove" w
${1:array}.pop(${2:0}, ${3:0});${0}
endsnippet
snippet fill "value(df:all), (start, (end))" w
${1:array}.fill(${2:num}, ${3:start});${0}
endsnippet
snippet reverse "reverse ary" w
reverse()${0}
endsnippet
snippet push "push to last" w
push(${1:element})${0}
endsnippet
snippet concat "merge ary" w
concat(${1:ary2})${0}
endsnippet
snippet indexof "elem index" w
indexof(${1:element});${0}
endsnippet
snippet tostring "ary tostring 1,2,3" w
toString();${0}
endsnippet
snippet filter "ary filter" w
filter(${1:function});${0}
endsnippet
snippet sort "ary sort" w
sort(${1:});${0}
endsnippet
snippet map "new ary with calling function on every elem" w
map(${1:function});${0}
endsnippet
snippet keys "ret obj of index of key eg012..." w
.keys(${1:function});${0}
endsnippet
snippet reduce "reducer function on each elem resulting 1 value" w
keys(${1:function}, ${2:start});${0}
endsnippet
snippet foreach "forEach" w
forEach((${2:item}) => {
	${0}
})
endsnippet
snippet some "a less one true will return true" w
some(${1:})i;
endsnippet
snippet ctb "console.table" b
console.table(${0:${VISUAL}});
endsnippet
snippet ael "addEventL..." w
addEventListener(${0})
endsnippet
snippet numcomma "comma with 3 num" b
function numberWithCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
endsnippet
snippet search_bar "search city example" b
f(word, city)
	return by filter
	for each place in city {
		declare RegExp(word, "gi")
		if space
			return ""
		else
			return either(||) string.match method with regex eg(place.city.match(regex))
	}
const match_city = findMatches(this.value, cities).slice(0, 5);
const innerhtml = match_city.map(place => {
	return `
		<li>
			<span class="name">${place.city}, ${place.state}</span>
			<span class="population">${numberWithCommas(place.population)}</span>
		</li>
	`;
}).join('');
suggestions.innerHTML = innerhtml;
endsnippet
snippet canvas_ctx "" b
const ctx canvas.getContext('2d');
ctx.strokeStyle = '#BADA55';
ctx.lineJoin = 'round';
ctx.lineCap = 'round';
endsnippet
snippet ctx_bgcolor "bgcolor of ctx" b
ctx.fillStyle = '${1:black}';
ctx.fillRect(0,0,canvas.width, canvas.height);${0}
endsnippet

snippet splice_word "restrict word sizes" b
pressed.splice(-keyWord.length - 1, pressed.length - keyWord.length);
endsnippet

snippet debounce "debounce" b
function debounce(func, wait = 20, immediate = true) {
	var timeout;
	return function() {
		var context = this, args = arguments;
		var later = function() {
			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		var callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
}
endsnippet

snippet js_form_value "get form_value by method" b
function getFormValues(form) {
	var inputs = form.getElementsByTagName('input');
	var controls = form.controls;
	var msg = "";
	for (var i=0, iLen=inputs.length; i<iLen; i++) {
		var name = inputs[i].getAttribute('id');
		var value = inputs[i].value;
		msg = msg + name + " : " + value + "\n";
	}
	alert(msg);
	// Prevent form submission
	return false;
}
endsnippet
snippet list_innerText "list innerText" b
var x = document.querySelectorAll("${1}");
var z = [];
x.forEach((y) => {
	z.push(y.innerText);
})
console.log(z);${0}
endsnippet

snippet canvas_supp "support canvas check" b
var canvas = document.getElementById('${1:canv}');

if (canvas.getContext){
	var ctx = canvas.getContext('2d');
	// drawing code here
} else {
	// canvas-unsupported code here
}${0}
endsnippet
snippet getFormValues "" b
function getFormValues(form) {
	form.preventDefault();
	// onsubmit="getFormValues(this)"
	var inputs = form.getElementsByTagName('input');
	var msg = "";
	for (var i=0, iLen=inputs.length; i<iLen; i++) {
		var name = inputs[i].getAttribute('name');
		if (name == null) {
			name = inputs[i].getAttribute('id');
		}
		var value = inputs[i].value;
		msg = msg + name + " : " + value + "\n";
	}
	alert(msg);
	return false;
}
endsnippet

snippet listCookies "Description" b
function listCookies() {
	var theCookies = document.cookie.split(';');
	var aString = '';
	for (var i = 1 ; i <= theCookies.length; i++) {
		aString += i + ' ' + theCookies[i-1] + "\n";
	}
	return aString;
}
endsnippet

snippet getId "get doc id" b
var ${1:a} = document.getElementById("$1");$0
endsnippet
snippet getCls "get doc class" b
var ${1:a} = document.getElementsByClassName("$1");$0
endsnippet
snippet getTn "get doc tag name" b
var ${1:a} = document.getElementsByTagName("$1");$0
endsnippet
snippet ire "import react" b
import React from 'react';
import ReactDOM from 'react-dom';
import './css/index.css';
endsnippet
snippet imf "import from" b
import ${1:method} from '${0:module}'
endsnippet

snippet rcl "react class" b
class ${1:ClassName} extends React.Component {
	state = {
	}
	${0}
}
endsnippet
snippet dvcn "" w
<div className="${1:cls}">
	${0}
</div>
endsnippet
snippet jqajax "" b
$.ajax({
	url: "${1}",
	data: ${2},
	dataType: "text",
	success: function(result) {

	},
	error: function(xhr, ajaxOptions, thrownError) {
		alert(xhr.status);
		alert(thrownError);
	}
});
endsnippet
snippet ajaxE "error" b
error: function (xhr, ajaxOptions, thrownError) {
	alert(xhr.status);
	alert(thrownError);
}
endsnippet
snippet jqcss "Description" b
$("${1:}").css("${2:}", "${0}");
endsnippet
snippet jqready "ready" b
$(document).ready(function() {
	${0}
})
endsnippet

snippet jqfind "" w
$("${1}").find(":selected").text()${0}
endsnippet

# expand console.log
snippet "([^\s]\w+)\.log" "console.log(postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet mod_exp "module exports" b
module.exports = ${0:`!v vim_snippets#Filename('$1', 'foo.html')`};
endsnippet

snippet set_cookie "set cookie" b
function setCookie(cname,cvalue,exdays)
{
  var d = new Date();
  d.setTime(d.getTime()+(exdays*24*60*60*1000));
  var expires = "expires="+d.toGMTString();
  document.cookie = cname + "=" + cvalue + "; " + expires;
}${0}
endsnippet

snippet get_cookie "get cookie" b
function getCookie(cname)
{
  var name = cname + "=";
  var ca = document.cookie.split(';');
  for(var i=0; i<ca.length; i++) 
  {
    var c = ca[i].trim();
    if (c.indexOf(name)==0) return c.substring(name.length,c.length);
  }
  return "";
}
endsnippet

################
#  for nodejs  #
################
snippet docs "Description" b
/* jshint esversion: 6 */
/****************
* Filename: ${1:`!v vim_snippets#Filename('$1.js', 'foo.js')`}
* Programmer: `!v g:snips_author`
* Email: `!v g:snips_email`
* Github: `!v g:snips_github`
* Date : `!v strftime("%Y-%m-%d %H:%M:%S")`
* Description: ${2:useless program}
****************/
endsnippet

snippet requ "require nodejs" b
const ${1:} = require("${2:$1}");
endsnippet

snippet fthHTML "fetch html" b
async function fetchHTML(url) {
  const { data } = await axios.get(url)
  return cheerio.load(data)
}
const $ = await fetchHTML("${1:https://www.google.com/}")${0}
endsnippet

snippet initmw "init middleware" b
const express = require('express');
const router = express.Router();

${0}

module.exports = router;
endsnippet
