###################
#  JAVA SNIPPETS  #
###################
snippet docs "document" b
/**
	Filename: ${1:`!v vim_snippets#Filename('$1.java', 'foo.java')`}
	Programmer: `!v g:snips_author`
	Email: `!v g:snips_email`
	Github: `!v g:snips_github`
	Date : `!v strftime("%Y-%m-%d")`
	Description: a program about${0}
*/
endsnippet
snippet studocs "student detail" b
/*
	Filename: ${1:`!v vim_snippets#Filename('$1.java', 'foo.java')`}
	Student name: `!v g:snips_student_name`
	Class: `!v g:snips_student_class`
	Student number: `!v g:snips_student_number`
	Description: a program about${0}
*/
endsnippet
snippet studocs2 "student detail" b
/******************************************
	Name of Source File: ${1:`!v vim_snippets#Filename('$1.java', 'foo.java')`}
	Student name (ID): `!v g:snips_student_name`
	Course Name (Code): `!v g:snips_student_class`
	Student number: `!v g:snips_student_number`
	Program Description:
		a program about${0}
*******************************************/
endsnippet
snippet jv.u "java util" b
import java.util.${1:*};${0}
endsnippet
# Scanner
snippet scan
Scanner ${1:kb} = new Scanner(System.in);${0}
endsnippet
snippet ip "input" b
${1:var} = ${2:kb}.next${0:Int}();
endsnippet
snippet prf "printf" b
System.out.print
endsnippet
snippet St "Description" w
String 
endsnippet
snippet strf "format str" w
String.format("${2:%.2f}", ${1:str})${0}
endsnippet
snippet jtlrand "import trand" b
import java.util.concurrent.ThreadLocalRandom;
endsnippet
snippet trand "thread rand" b
Random rnd = ThreadLocalRandom.current();
endsnippet
snippet dbg "if (DEVELOPMENT) dbg" "re.match('^if \(DEVELOPMENT\) \{', snip.buffer[snip.line-1])" be
debugger;
endsnippet
snippet sop
System.out.println("${0}");
endsnippet
snippet fori "1.count 2.i 3.++" b
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:${VISUAL}}
}
endsnippet
snippet dou "double" w
double 
endsnippet
snippet toSt "toString" b
public String toString() {
	return ${1:String};
}${0}
endsnippet
snippet boo "boolean" w
boolean 
endsnippet
snippet m "void main" b
${1:private} ${2:void} ${3:method}($4) {
	${0:${VISUAL}}
}
endsnippet
snippet wh "while" b
while(${1:true}) {
	${0:${VISUAL}}
}
endsnippet
snippet Obj "Object" w
Object 
endsnippet

snippet inf "interface" b
interface ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	${0:${VISUAL}}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	${0:${VISUAL}}
}
endsnippet

snippet j_b "java_beans" i
java.beans.
endsnippet

snippet j_i "java_io" i
java.io.
endsnippet

snippet j_m "java_math" i
java.math.
endsnippet

snippet j_n "java_net_" i
java.net.
endsnippet

snippet j_u "java_util_"  i
java.util.
endsnippet

snippet jlang "import lang library" w
java.lang.${1:*};${0}
endsnippet
snippet jmath "import math library" w
java.math.${1:*};${0}
endsnippet
snippet jxjop "import jxjop" b
import javax.swing.JOptionPane;
endsnippet
snippet read_file "" b
Path path = Paths.get("${1:/myfolder/myfile.ext}");
try (BufferedReader reader = Files.newBufferedReader(path)) {
	// Read from the stream
	String currentLine = null;
	while ((currentLine = reader.readLine()) != null)
		//do your code here
		${0}
} catch (IOException e) {
	// Handle file I/O exception...
}
endsnippet
snippet write_txt_file "" b
Path path = Paths.get("${1:/myfolder/myfile.ext}");
try (BufferedWriter writer = Files.newBufferedWriter(file)) {
	writer.append("Zero header: ").append('0').write("\r\n"); //example
	${0}
} catch (IOException e) {
	// Handle file I/O exception...
}
endsnippet
snippet @servlet "servlet" b
@WebServlet(name = "${1:name}", urlPatterns = {"/$1"})
public class $1 extends HttpServlet {
	@Override
	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		res.setContentType('text/html');
		req.setCharacterEncoding("UTF-8");
		PrintWriter out = res.getWriter();
		${0}
	}
}
endsnippet

snippet jvbind "jvbind" b
Connection cnnct = null;
PreparedStatement pStmnt = null;
${1}
try {
	cnnct = getConnection();
	String preQueryStatement = "${2}";
	pStmnt = cnnct.prepareStatement(preQueryStatement);
	pStmnt.setString(${3});
	ResultSet rs = null;
	rs = pStmnt.executeQuery();
	if (rs.next()) {
		${0}
	}
	pStmnt.close();
	cnnct.close();

} catch (SQLException ex) {
	while (ex != null) {
		ex.printStackTrace();
		ex = ex.getNextException();
	}
} catch (IOException ex) {
	ex.printStackTrace();
}
endsnippet

snippet jvTable "statment" b
public void create${1}Table() {
	Connection cnnct = null;
	Statement stmnt = null;
	try {
		cnnct = getConnection();
		stmnt = cnnct.createStatement();
		String sql
				= "CREATE TABLE IF NOT EXISTS $1 ("
				+ "id varchar(5) NOT NULL,"
				+ "username varchar(25) NOT NULL,"
				+ "password varchar(25) NOT NULL,"
				+ "PRIMARY KEY (id)"
				+ ")";
		stmnt.execute(sql);
		stmnt.close();
		cnnct.close();

	} catch (SQLException ex) {
		ex.printStackTrace();
	} catch (IOException ex) {
		ex.printStackTrace();
	}
}
endsnippet

snippet jvDB "Description" b
public class ${1:`!p snip.rv = snip.basename or "untitled"`} {
	private String dbUrl, dbUser, dbPassword;

	public $1(String dbUrl, String dbUser, String dbPassword) {
		this.dbUrl = dbUrl;
		this.dbUser = dbUser;
		this.dbPassword = dbPassword;
	}

	public Connection getConnection() throws SQLException, IOException {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException ex) {
			ex.printStackTrace();
		}
		return DriverManager.getConnection(dbUrl, dbUser, dbPassword);
	}
}
endsnippet

snippet impSql "Description" b
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
endsnippet

snippet baseDB "Description" b
package ict.db;

import ict.bean.BaseBean;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class BaseDb {

	private String url = "";
	private String username = "";
	private String password = "";

	public BaseDb(String url, String username, String password) {
		this.url = url;
		this.username = username;
		this.password = password;
	}

	public Connection getConnection() throws SQLException, IOException {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException ex) {
			ex.printStackTrace();
		}
		return DriverManager.getConnection(url, username, password);
	}

	public ArrayList<BaseBean> getRecords(String statement, ArrayList<String> data, BaseBean bb) {
		Connection cnnct = null;
		PreparedStatement pStmnt = null;
		ArrayList recordList = new ArrayList();

		try {
			cnnct = getConnection();
			String preQueryStatement = statement;
			pStmnt = cnnct.prepareStatement(preQueryStatement);
			for (int i = 1; i <= data.size(); i++) {
				pStmnt.setString(i, data.get(i - 1));
			}
			ResultSet rs = null;
			rs = pStmnt.executeQuery();
			while (rs.next()) {
				BaseBean b = bb.getBean(rs);
				recordList.add(b);
			}
			pStmnt.close();
			cnnct.close();
		} catch (SQLException ex) {
			while (ex != null) {
				ex.printStackTrace();
				ex = ex.getNextException();
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return recordList;
	}

	public BaseBean getRecord(String statement, ArrayList<String> data, BaseBean bb) {
		Connection cnnct = null;
		PreparedStatement pStmnt = null;

		try {
			cnnct = getConnection();
			String preQueryStatement = statement;
			pStmnt = cnnct.prepareStatement(preQueryStatement);
			for (int i = 1; i <= data.size(); i++) {
				pStmnt.setString(i, data.get(i - 1));
			}
			ResultSet rs = null;
			rs = pStmnt.executeQuery();
			if (rs.next()) {
				bb.mapBean(rs);
			}
			pStmnt.close();
			cnnct.close();
		} catch (SQLException ex) {
			while (ex != null) {
				ex.printStackTrace();
				ex = ex.getNextException();
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return bb;
	}

	public boolean editRecord(String statement, ArrayList<String> data, BaseBean bb) {
		Connection cnnct = null;
		PreparedStatement pStmnt = null;
		boolean isSuccess = false;
		try {
			cnnct = getConnection();
			String preQueryStatement = statement;
			pStmnt = cnnct.prepareStatement(preQueryStatement);
			for (int i = 1; i <= data.size(); i++) {
				pStmnt.setString(i, data.get(i - 1));
			}
			int rowCount = pStmnt.executeUpdate();
			if (rowCount >= 1) {
				isSuccess = true;
			}
			pStmnt.close();
			cnnct.close();
		} catch (SQLException ex) {
			while (ex != null) {
				ex.printStackTrace();
				ex = ex.getNextException();
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return isSuccess;
	}

}
endsnippet


snippet rc "Description" b
int rowCount = pStmnt.executeUpdate();
if (rowCount >= 1) {
	isSuccess = true;
}
endsnippet
snippet reqP "Description" w
request.getParameter("${1}");${0}
endsnippet

snippet async_task "" b
// still not write
private class DownloadFilesTask extends AsyncTask<URL, Integer, Long> { // <Params, Progress, Result>
endsnippet

snippet formap "for map" b
for (Map.Entry<String, String> entry : map.entrySet()) {
    System.out.println(entry.getKey() + "/" + entry.getValue());
}
endsnippet
