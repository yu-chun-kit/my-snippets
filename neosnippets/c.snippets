# DocStrings
snippet docs
	/*
		Filename: ${1:`vim_snippets#Filename('$1.c', 'foo.c')`}
		Programmer: `g:snips_author`
		Email: `g:snips_email`
		Github: `g:snips_github`
		Description: a program about ${0: }
	*/
# findhash
snippet findhash
		int min = 2147483647, i = 0;
		for (i = 0; i < ${1:numsSize}; i++) {
			if (${2:nums}[i] < min)
				min = $2[i];
		}
		int max = ${3:target} - min;
		int len = max - min + 1;   // size of hash
		int *table = (int*)malloc(len*sizeof(int));
		int *indice = (int*)malloc(2*sizeof(int));
		for (i = 0; i < len; i++) {
			table[i] = -1;         // initialize hash
		}
# getSent
snippet getSent
	int getSent(char s[], int lim) {
		int i, j, c;
		i = j = 0;
		for(; (c = getchar()) != EOF && c != '\n'; ++i) {
			if(i < lim - 2) {
				s[j] = c;
				++j;
			}
		}
		if(c == '\n') {
			s[j] = c;
			++j;
			++i;
		}
		s[j] = '\0';
		return i;
	}${0}
# copy
snippet cp
	void ${1:copy}(char to[], char from[]) {
		int i = 0;
		while((to[i] = from[i]) != '\0')
		++i;
	}${0}
# remove space
snippet rmsp
	int ${1:remove_space}(char s[]) {
		int i = 0;
		while(s[i] != '\n')
			++i;
		--i;
		if (i >= 0) {
			++i;
			s[i] = '\n';
			++i;
			s[i] = '\0';
		}
		return i;
	}${0}
# reverse char
snippet resc
	void ${1:reverse_char}(char s[]) {
		int i = 0, j = 0;
		char temp;

		while (s[i] != '\0')
			++i;
		--i;
		if (s[i] == '\n')
			--i;
		j = 0;
		while (j < i) {
			temp = s[j];
			s[j] = s[i];
			s[i] = temp;
			--i;
			++j;
		}
		printf("%s", s);
	}${0}
# entab program
snippet entab
	int c, nb, nt, pos;
	nb = nt = 0;
	for (pos = 1; (c = getchar()) != EOF; ++pos) {
		if (c == ' ') {
			if (pos % 8 != 0)
				++nb;
		}
		else {
			nb = 0;
			++nt;
		}
		else {
			for (; nt > 0; --nt)
				putchar('\t');
			if (c == '\t')
				nb = 0;
			else
				for(; nb > 0; --nb)
					putchar(' ');
			putchar(c);
			if (c == '\n')
				pos = 0;
			else if (c == '\t')
				pos = pos + (8 - (pos  1) % TABINC) - 1;
		}
	}${0}
# squeeze
snippet squeeze
	void squeeze(char s1[], char s2[]) {
		int i, j, k;
		for (k = i = 0; s1[i] !=  '\0'; i++) {
			for (j = 0; s2[j] != '\0' && s2[j] != s1[i]; j++)
				;
			if (s2[j] == '\0')
				s1[k++] = s1[i]; // s1[k] = the char pass the s[2] string
		}
		s1[k] = '\0';
	}
snippet typerange
	(${1:int})((unsigned $1) ~0 >> 1)${0}
